name: Publish mcp-server (npm)

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'
  workflow_dispatch:

concurrency:
  group: publish-mcp-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Determine tag and verify matches package version
        working-directory: mcp-server
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            TAG="${{ github.event.release.tag_name }}"
          else
            TAG="${{ github.ref_name }}"
          fi
          PKG_VER=$(node -p "require('./package.json').version")
          echo "tag: $TAG / package: $PKG_VER"
          if [ "v$PKG_VER" != "$TAG" ]; then
            echo "Version mismatch: tag($TAG) != package($PKG_VER)" >&2
            exit 1
          fi
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Ensure csharp-lsp manifest exists in release assets (with wait)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TAG="$TAG"
          REPO="${{ github.repository }}"
          echo "waiting for csharp-lsp-manifest.json on $REPO@$TAG..."
          # 最大 ~20分待機（120回 x 10秒）: ビルド行列が長引くケースを考慮
          for i in $(seq 1 120); do
            if gh release view "$TAG" --repo "$REPO" >/dev/null 2>&1; then
              NAMES=$(gh release view "$TAG" --repo "$REPO" --json assets --jq '.assets[].name' 2>/dev/null || true)
              if echo "$NAMES" | grep -qx 'csharp-lsp-manifest.json'; then
                echo "$NAMES"
                echo "found manifest"
                exit 0
              fi
            fi
            sleep 10
          done
          echo "csharp-lsp-manifest.json not found in release assets for $TAG" >&2
          exit 1

      - name: Install deps and test
        working-directory: mcp-server
        run: |
          npm ci
          npm run test:ci

      - name: Publish to npm (public)
        working-directory: mcp-server
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm publish --access public
