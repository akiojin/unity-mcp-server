name: Release csharp-lsp

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: build ${{ matrix.rid }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            rid: linux-x64
            ext: ''
          - os: ubuntu-latest
            rid: linux-arm64
            ext: ''
          - os: windows-latest
            rid: win-x64
            ext: '.exe'
          - os: windows-latest
            rid: win-arm64
            ext: '.exe'
          - os: macos-latest
            rid: osx-x64
            ext: ''
          - os: macos-latest
            rid: osx-arm64
            ext: ''
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect LSP project
        id: detect
        shell: bash
        run: |
          if ls csharp-lsp/*.csproj >/dev/null 2>&1; then
            echo "present=true" >> $GITHUB_OUTPUT
          else
            echo "present=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          include-prerelease: true

      - name: .NET info
        run: dotnet --info

      - name: Setup Node.js (for hashing)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Restore
        if: ${{ steps.detect.outputs.present == 'true' }}
        shell: bash
        run: |
          dotnet restore csharp-lsp/Server.csproj -r "${{ matrix.rid }}"

      - name: Publish csharp-lsp (self-contained single-file)
        if: ${{ steps.detect.outputs.present == 'true' }}
        shell: bash
        run: |
          mkdir -p out/${{ matrix.rid }}
          dotnet publish csharp-lsp/Server.csproj \
            -c Release -r "${{ matrix.rid }}" \
            --self-contained true -p:PublishSingleFile=true -p:PublishTrimmed=false \
            -o out/${{ matrix.rid }}
          BIN="out/${{ matrix.rid }}/server${{ matrix.ext }}"
          ASSET="csharp-lsp-${{ matrix.rid }}${{ matrix.ext }}"
          test -f "$BIN" || { echo "binary not found: $BIN" >&2; ls -la out/${{ matrix.rid }}; exit 1; }
          mv "$BIN" "$ASSET"
          node -e '
            const fs=require("fs"),crypto=require("crypto");
            const f=process.argv[1];
            const h=crypto.createHash("sha256");
            h.update(fs.readFileSync(f));
            console.log(h.digest("hex"), f);
          ' "$ASSET" > "$ASSET.sha256"

      - name: Upload artifact
        if: ${{ steps.detect.outputs.present == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: asset-${{ matrix.rid }}
          path: |
            csharp-lsp-${{ matrix.rid }}${{ matrix.ext }}
            csharp-lsp-${{ matrix.rid }}${{ matrix.ext }}.sha256

  release:
    name: publish release
    needs: build
    runs-on: ubuntu-latest
    if: ${{ needs.build.result == 'success' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Detect built assets
        id: assets
        shell: bash
        run: |
          set -euo pipefail
          if compgen -G "dist/**/csharp-lsp-*" > /dev/null; then
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Generate manifest
        id: gen
        if: ${{ steps.assets.outputs.found == 'true' }}
        shell: bash
        run: |
          node -e '
            const fs = require("fs");
            const path = require("path");
            const crypto = require("crypto");
            const repo = process.env.GITHUB_REPOSITORY;
            const tag = process.env.GITHUB_REF_NAME;
            const base = `https://github.com/${repo}/releases/download/${tag}`;
            const root = "dist";
            const dirs = fs.readdirSync(root, { withFileTypes: true }).filter(d => d.isDirectory());
            const files = [];
            for (const d of dirs) {
              for (const f of fs.readdirSync(path.join(root, d.name))) {
                if (f.startsWith("csharp-lsp-")) files.push({ dir: d.name, file: f });
              }
            }
            const assets = {};
            for (const { dir, file } of files) {
              const m = file.match(/^csharp-lsp-([^\.]+)(\.exe)?$/);
              if (!m) continue;
              const rid = m[1];
              const p = path.join(root, `asset-${rid}`, file);
              const stat = fs.statSync(p);
              const data = fs.readFileSync(p);
              const sha = crypto.createHash("sha256").update(data).digest("hex");
              assets[rid] = { url: `${base}/${file}`, sha256: sha, size: stat.size };
            }
            const manifest = { version: tag.replace(/^v/, ""), assets };
            fs.writeFileSync("csharp-lsp-manifest.json", JSON.stringify(manifest, null, 2));
          '

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: ${{ steps.assets.outputs.found == 'true' }}
        with:
          files: |
            dist/**/csharp-lsp-*
            csharp-lsp-manifest.json
          generate_release_notes: true
          prerelease: ${{ contains(github.ref_name, '-') }}
